#!/bin/bash
# shellcheck shell=bash

set -e

DOTFILES_INCLUDES="${DOTFILES_INCLUDES:-"$HOME/.config/.dotfiles"}"
DOTFILES_HOME="${DOTFILES_HOME:-"$HOME/.local/share/dotfiles"}"
DOTFILES_BACKUP="${DOTFILES_BACKUP:-"$DOTFILES_HOME/.backup"}"

DOTFILES_REPOSITORY="${DOTFILES_REPOSITORY:-"chg1f/dotfiles"}"
DOTFILES_BRANCH="${DOTFILES_BRANCH:-"main"}"
DOTFILES_COMMIT_USER_NAME="${DOTFILES_COMMIT_USER_NAME:-"dotfiles"}"
DOTFILES_COMMIT_USER_EMAIL="${DOTFILES_COMMIT_USER_EMAIL:-"dotfiles@scripts.com"}"
DOTFILES_COMMIT_MESSAGE="${DOTFILES_COMMIT_MESSAGE:-"$(uname -s) at $(date +"%Y-%m-%d %H:%M:%S")"}"

DOTFILES_NOPULL="${DOTFILES_NOPULL:-0}"
DOTFILES_NOPUSH="${DOTFILES_NOPUSH:-0}"

__dotfiles_backup="$DOTFILES_BACKUP/$(date "+%Y%m%d_%H%M%S")"

prepare_dotfiles() {
  if [[ ! -d $DOTFILES_HOME ]]; then
    git clone "https://github.com/$DOTFILES_REPOSITORY.git" "$DOTFILES_HOME" >/dev/null 2>&1
    return
  fi
  [[ $DOTFILES_NOPULL -ne 0 ]] && return
  git -C "$DOTFILES_HOME" add -Av
  git -C "$DOTFILES_HOME" stash save "$DOTFILES_COMMIT_MESSAGE"
  git -C "$DOTFILES_HOME" pull origin "$DOTFILES_BRANCH" --force
}
contains() {
  for e in "${@:2}"; do [[ $e == "$1" ]] && return 0; done
  return 1
}
add_includes() {
  includes=()
  if [[ -r "$DOTFILES_INCLUDES" ]]; then
    while read -r i; do
      [[ -z "$i" ]] && continue
      [[ "$i" =~ ^# ]] && continue
      contains "$i" "${includes[@]}" || includes+=("$i")
    done < <(cat "$DOTFILES_INCLUDES")
  fi
  for i in "${@}"; do
    [[ -z "$i" ]] && continue
    contains "$i" "${includes[@]}" || includes+=("$i")
  done
  echo "${includes[@]}"
}
parse_includes() {
  for i in "${@}"; do
    case "$i" in
    bin)
      files+=(
        ".local/bin/dotfiles"
        ".local/bin/colortest"
      )
      ;;
    bash)
      files+=(
        ".profile"
        ".bash_profile"
        ".bash_login"
        ".bashrc"
        ".bash_aliases"
        ".bash_logout"
        ".inputrc"
      )
      ;;
    vim)
      files+=(
        ".vimrc"
        ".config/nvim/init.vim"
      )
      ;;
    zsh)
      files+=(
        ".zshenv"
        ".config/zsh/.zprofile"
        ".config/zsh/.zshrc"
        ".config/zsh/.zlogin"
        ".config/zsh/.zlogout"
        ".config/zsh/.zimrc"
        ".config/zsh/.p10k.zsh"
      )
      ;;
    nvim)
      files+=(
        ".vimrc"
        ".config/nvim/init.vim"
        ".config/nvim/lua/lazyinit.lua"
        ".editorconfig"
      )
      ;;
    tmux)
      files+=(
        ".config/tmux/tmux.conf"
      )
      ;;
    wezterm)
      files+=(
        ".config/wezterm/wezterm.lua"
      )
      ;;
    git)
      files+=(
        ".config/git/config"
      )
      ;;
    ssh)
      files+=(
        ".ssh/config"
      )
      ;;

    i3wm)
      files+=(
        ".config/i3/config"
        ".xinitrc"
        ".Xresources"
      )
      ;;
    bspwm)
      files+=(
        ".config/bspwm/bspwmrc"
        ".xinitrc"
        ".Xresources"
      )
      ;;
    shkd)
      files+=(
        ".config/shkd/shkdrc"
      )
      ;;
    yabai)
      files+=(
        ".config/yabai/yabairc"
      )
      ;;
    sxhkd)
      files+=(
        ".config/sxhkd/sxhkdrc"
      )
      ;;
    *) files+=("$i") ;;
    esac
  done
  echo "${files[@]}"
}
commit_dotfiles() {
  [[ $DOTFILES_NOPUSH -eq 0 ]] || return
  git -C "$DOTFILES_HOME" add -Av >/dev/null
  # git -C "$DOTFILES_HOME" diff HEAD^
  read -rp "Do you want to save the changes? [y/N] " answer
  if [[ $answer =~ ^[Yy] ]]; then
    git -C "$DOTFILES_HOME" -c "user.name=$DOTFILES_COMMIT_USER_NAME" -c "user.email=$DOTFILES_COMMIT_USER_EMAIL" commit -m "$DOTFILES_COMMIT_MESSAGE" >/dev/null 2>&1
    git -C "$DOTFILES_HOME" push origin "$DOTFILES_BRANCH" >/dev/null 2>&1
  fi
}

case $1 in
save)
  prepare_dotfiles
  includes=("$(add_includes "${@:2}")")
  echo "${includes[*]}" | tr ' ' '\n' | sort >"$DOTFILES_INCLUDES"
  files=("$(parse_includes ${includes[*]})")
  mkdir -p "$__dotfiles_backup"
  echo "${files[*]}" | tr ' ' '\n' | sort -u >"$__dotfiles_backup/.dotfiles"
  rsync -irabc --ignore-missing-args --backup-dir="$__dotfiles_backup" --files-from="$__dotfiles_backup/.dotfiles" "$HOME/" "$DOTFILES_HOME" --out-format="%i %n%L"
  commit_dotfiles
  ;;
load)
  prepare_dotfiles
  includes=("$(add_includes "${@:2}")")
  echo "${includes[*]}" | tr ' ' '\n' | sort >"$DOTFILES_INCLUDES"
  files=("$(parse_includes ${includes[*]})")
  mkdir -p "$__dotfiles_backup"
  echo "${files[*]}" | tr ' ' '\n' | sort -u >"$__dotfiles_backup/.dotfiles"
  rsync -irabc --ignore-missing-args --backup-dir="$__dotfiles_backup" --files-from="$__dotfiles_backup/.dotfiles" "$DOTFILES_HOME/" "$HOME" --out-format="%i %n%L" -n
  ;;
download)
  files=("$(parse_includes "$(add_includes "${@:2}")")")
  for p in "${files[@]}"; do
    curl -fsSL "https://raw.githubusercontent.com/$DOTFILES_REPOSITORY/$DOTFILES_BRANCH/$p" -o "$HOME/$p"
  done
  ;;
setup)
  for i in "${@:2}"; do
    case $i in
    sshd) ;;
    brew) ;;
    fzf) ;;
    asdf) ;;
    pyenv) ;;
    gvm) ;;
    nvm) ;;
    esac
  done
  ;;
*)
  echo "\
  Usage: $0 [save|load|download|setup] [INCLUDES...]"
  exit 1
  ;;
esac
