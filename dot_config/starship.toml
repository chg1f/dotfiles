# Warning: This config does not include keys that have an unset value

# $all is shorthand for $username$hostname$localip$shlvl$singularity$kubernetes$nats$directory$vcsh$fossil_branch$fossil_metrics$git_branch$git_commit$git_state$git_metrics$git_status$hg_branch$pijul_channel$docker_context$package$bun$c$cmake$cobol$daml$dart$deno$dotnet$elixir$elm$erlang$fennel$gleam$golang$gradle$haskell$haxe$helm$java$julia$kotlin$lua$mojo$nim$nodejs$ocaml$odin$opa$perl$php$pulumi$purescript$python$quarto$raku$rlang$red$ruby$rust$scala$solidity$swift$terraform$typst$vlang$vagrant$zig$buf$guix_shell$nix_shell$conda$meson$spack$memory_usage$aws$gcloud$openstack$azure$direnv$env_var$crystal$custom$sudo$cmd_duration$line_break$jobs$battery$time$status$container$os$shell$character
"$schema" = "https://starship.rs/config-schema.json"
format = "(($status )($cmd_duration )$line_break)$username@$hostname:$directory $git_branch$git_commit$git_status$git_metrics$git_state $fill$all$localip $line_break$character"
right_format = "$direnv$time"
continuation_prompt = "[‚àô](bright-black) "
scan_timeout = 30
command_timeout = 500
add_newline = true
follow_symlinks = true


[palettes]

[profiles]

[aws]
format = 'on [$symbol($profile )(\($region\) )(\[$duration\] )]($style)'
symbol = "aws  "
style = "bold yellow"
disabled = false
expiration_symbol = "X"
force_display = false

[aws.region_aliases]

[aws.profile_aliases]

[azure]
format = " [$symbol($subscription)]($style) "
symbol = "azure "
style = "blue bold"
disabled = true

[azure.subscription_aliases]

[battery]
full_symbol = "Û∞Åπ "
charging_symbol = "Û∞ÇÑ "
discharging_symbol = "Û∞ÇÉ "
unknown_symbol = "Û∞ÅΩ "
empty_symbol = "Û∞Çé "
disabled = false
format = "[$symbol$percentage]($style) "

[[battery.display]]
threshold = 10
style = "red bold"

[buf]
format = "with [$symbol($version )]($style)"
version_format = "v${raw}"
symbol = "buf "
style = "bold blue"
disabled = false
detect_extensions = []
detect_files = ["buf.yaml", "buf.gen.yaml", "buf.work.yaml"]
detect_folders = []

[bun]
format = " [$symbol($version )]($style)"
version_format = "v${raw}"
symbol = "bun "
style = "bold red"
disabled = false
detect_extensions = []
detect_files = ["bun.lock", "bun.lockb", "bunfig.toml"]
detect_folders = []

[c]
format = " [$symbol($version(-$name) )]($style)"
version_format = "v${raw}"
style = "149 bold"
symbol = "c "
disabled = false
detect_extensions = ["c", "h"]
detect_files = []
detect_folders = []
commands = [["cc", "--version"], ["gcc", "--version"], ["clang", "--version"]]

[character]
format = "$symbol "
success_symbol = "[#](bold bright-black)"
error_symbol = "[#](bold black)"
vimcmd_symbol = "[c](bold green)"
vimcmd_visual_symbol = "[v](bold yellow)"
vimcmd_replace_symbol = "[R](bold purple)"
vimcmd_replace_one_symbol = "[r](bold purple)"
disabled = false

[cmake]
format = " [$symbol($version )]($style)"
version_format = "v${raw}"
symbol = "cmake "
style = "bold blue"
disabled = false
detect_extensions = []
detect_files = ["CMakeLists.txt", "CMakeCache.txt"]
detect_folders = []

[cmd_duration]
format = "[LATENCY: $duration]($style) "
style = "bold yellow"
min_time = 1000
show_milliseconds = true
show_notifications = false
min_time_to_notify = 60000
disabled = false

[cobol]
format = " [$symbol($version )]($style)"
version_format = "v${raw}"
symbol = "cobol "
style = "bold blue"
disabled = false
detect_extensions = ["cbl", "cob", "CBL", "COB"]
detect_files = []
detect_folders = []

[conda]
truncation_length = 1
format = " [$symbol$environment]($style) "
symbol = "conda "
style = "green bold"
ignore_base = true
disabled = false

[container]
format = '[$symbol \[$name\]]($style) '
symbol = "container"
style = "red bold dimmed"
disabled = false

[crystal]
format = " [$symbol($version )]($style)"
version_format = "v${raw}"
symbol = "crystal "
style = "bold red"
disabled = false
detect_extensions = ["cr"]
detect_files = ["shard.yml"]
detect_folders = []

[daml]
symbol = "daml "
format = " [$symbol($version )]($style)"
version_format = "v${raw}"
style = "bold cyan"
disabled = false
detect_extensions = []
detect_files = ["daml.yaml"]
detect_folders = []

[dart]
format = " [$symbol($version )]($style)"
version_format = "v${raw}"
symbol = "dart "
style = "bold blue"
disabled = false
detect_extensions = ["dart"]
detect_files = ["pubspec.yaml", "pubspec.yml", "pubspec.lock"]
detect_folders = [".dart_tool"]

[deno]
format = " [$symbol($version )]($style)"
version_format = "v${raw}"
symbol = "deno "
style = "green bold"
disabled = false
detect_extensions = []
detect_files = [
  "deno.json",
  "deno.jsonc",
  "deno.lock",
  "mod.ts",
  "deps.ts",
  "mod.js",
  "deps.js",
]
detect_folders = []

[directory]
disabled = false
home_symbol = "~"
truncation_length = 5
truncate_to_repo = false
truncation_symbol = ".../"
format = "[$path]($style)( [$read_only]($read_only_style))"
repo_root_format = "([$read_only]($read_only_style) )[$before_root_path]($before_repo_root_style)[$repo_root]($repo_root_style)[$path]($style)"
read_only = "RO"
read_only_style = "bold bg:red"
before_repo_root_style = "bright-black"
repo_root_style = "bold blue"
style = "blue"
use_os_path_sep = true
use_logical_path = true

[directory.substitutions]

[direnv]
format = "[$symbol$loaded/$allowed]($style) "
symbol = "direnv "
style = "bright-blue"
disabled = false
detect_extensions = []
detect_env_vars = ["DIRENV_FILE"]
detect_files = [".envrc", ".env"]
detect_folders = []
allowed_msg = "allowed"
not_allowed_msg = "not allowed"
denied_msg = "denied"
loaded_msg = "loaded"
unloaded_msg = "unloaded"

[docker_context]
symbol = "docker "
style = "blue bold"
format = " [$symbol$context]($style) "
only_with_files = true
disabled = false
detect_extensions = []
detect_files = ["docker-compose.yml", "docker-compose.yaml", "Dockerfile"]
detect_folders = []

[dotnet]
format = " [$symbol($version )(üéØ $tfm )]($style)"
version_format = "v${raw}"
symbol = ".net "
style = "blue bold"
heuristic = true
disabled = false
detect_extensions = ["csproj", "fsproj", "xproj"]
detect_files = [
  "global.json",
  "project.json",
  "Directory.Build.props",
  "Directory.Build.targets",
  "Packages.props",
]
detect_folders = []

[elixir]
format = 'via [$symbol($version \(OTP $otp_version\) )]($style)'
version_format = "v${raw}"
symbol = "elixir "
style = "bold purple"
disabled = false
detect_extensions = []
detect_files = ["mix.exs"]
detect_folders = []

[elm]
format = " [$symbol($version )]($style)"
version_format = "v${raw}"
symbol = "elm "
style = "cyan bold"
disabled = false
detect_extensions = ["elm"]
detect_files = ["elm.json", "elm-package.json", ".elm-version"]
detect_folders = ["elm-stuff"]

[env_var]

[erlang]
format = " [$symbol($version )]($style)"
version_format = "v${raw}"
symbol = "erlang "
style = "bold red"
disabled = false
detect_extensions = []
detect_files = ["rebar.config", "erlang.mk"]
detect_folders = []

[fennel]
format = " [$symbol($version )]($style)"
version_format = "v${raw}"
symbol = "fennel "
style = "bold green"
disabled = true
detect_extensions = ["fnl"]
detect_files = []
detect_folders = []

[fill]
style = ""
symbol = " "
disabled = false

[fossil_branch]
format = " [$symbol$branch]($style) "
symbol = " "
style = "bold purple"
truncation_length = 9223372036854775807
truncation_symbol = "..."
disabled = true

[fossil_metrics]
format = "([+$added]($added_style) )([-$deleted]($deleted_style) )"
added_style = "bold green"
deleted_style = "bold red"
only_nonzero_diffs = true
disabled = true

[gcloud]
format = 'on [$symbol$account(@$domain)(\($region\))]($style) '
symbol = "gcloud  "
style = "bold blue"
disabled = false
detect_env_vars = []

[gcloud.region_aliases]

[gcloud.project_aliases]

[git_branch]
format = "[$symbol$branch(:$remote_branch)]($style) "
symbol = ""
style = "bold purple"
truncation_length = 50
truncation_symbol = "..."
only_attached = false
always_show_remote = false
ignore_branches = []
disabled = false

[git_commit]
commit_hash_length = 7
format = '[\($hash$tag\)]($style) '
style = "purple"
only_detached = true
disabled = false
tag_symbol = " "
tag_disabled = false
tag_max_candidates = 0

[git_metrics]
added_style = "bold green"
deleted_style = "bold red"
only_nonzero_diffs = true
format = "([+$added]($added_style)[-$deleted]($deleted_style)) "
disabled = false
ignore_submodules = false

[git_status]
format = "([$ahead_behind](bold bright-yellow) )([$conflicted$modified](bright-cyan) )([$typechanged$staged$deleted$renamed$stashed$untracked](cyan) )"
up_to_date = "U"
diverged = "D"
ahead = "A${count}"
behind = "B${count}"
conflicted = "c${count}"
modified = "m${count}"
typechanged = "t"
staged = "a${count}"
deleted = "d${count}"
renamed = "r${count}"
stashed = 's${count}'
untracked = "?${count}"
ignore_submodules = false
disabled = false

[git_state]
disabled = false
format = '[$state($progress_current/$progress_total)]($style) '
style = "bold bg:bright-purple"
rebase = "REBASING"
merge = "MERGING"
revert = "REVERTING"
cherry_pick = "CHERRY-PICKING"
bisect = "BISECTING"
am = "AM"
am_or_rebase = "AM/REBASE"

[gleam]
format = " [$symbol($version )]($style)"
version_format = "v${raw}"
symbol = "gleam "
style = "bold #FFAFF3"
disabled = false
detect_extensions = ["gleam"]
detect_files = ["gleam.toml"]
detect_folders = []

[golang]
format = " [$symbol($version )]($style)"
version_format = "v${raw}"
symbol = "golang "
style = "bold cyan"
disabled = false
not_capable_style = "bold red"
detect_extensions = ["go"]
detect_files = [
  "go.mod",
  "go.sum",
  "go.work",
  "glide.yaml",
  "Gopkg.yml",
  "Gopkg.lock",
  ".go-version",
]
detect_folders = ["Godeps"]

[gradle]
format = " [$symbol($version )]($style)"
version_format = "v${raw}"
symbol = "gradle "
style = "bold bright-cyan"
disabled = false
recursive = false
detect_extensions = ["gradle", "gradle.kts"]
detect_files = []
detect_folders = ["gradle"]

[guix_shell]
format = " [$symbol]($style) "
symbol = "guix "
style = "yellow bold"
disabled = false

[haskell]
format = " [$symbol($version )]($style)"
version_format = "v${raw}"
symbol = "haskell "
style = "bold purple"
disabled = false
detect_extensions = ["hs", "cabal", "hs-boot"]
detect_files = ["stack.yaml", "cabal.project"]
detect_folders = []

[haxe]
format = " [$symbol($version )]($style)"
version_format = "v${raw}"
symbol = "haxe "
style = "bold fg:202"
disabled = false
detect_extensions = ["hx", "hxml"]
detect_files = ["haxelib.json", "hxformat.json", ".haxerc"]
detect_folders = [".haxelib", "haxe_libraries"]

[helm]
format = " [$symbol($version )]($style)"
version_format = "v${raw}"
symbol = "helm "
style = "bold white"
disabled = false
detect_extensions = []
detect_files = ["helmfile.yaml", "Chart.yaml"]
detect_folders = []

[hg_branch]
symbol = "hg "
style = "bold purple"
format = " [$symbol$branch(:$topic)]($style) "
truncation_length = 9223372036854775807
truncation_symbol = "..."
disabled = true

[hostname]
ssh_only = false
ssh_symbol = ""
trim_at = "."
detect_env_vars = []
format = "[$ssh_symbol$hostname]($style)"
style = "yellow"
disabled = false

[hostname.aliases]

[java]
disabled = false
format = " [$symbol($version )]($style)"
version_format = "v${raw}"
style = "red dimmed"
symbol = "java "
detect_extensions = ["java", "class", "jar", "gradle", "clj", "cljc"]
detect_files = [
  "pom.xml",
  "build.gradle.kts",
  "build.sbt",
  ".java-version",
  "deps.edn",
  "project.clj",
  "build.boot",
  ".sdkmanrc",
]
detect_folders = []

[jobs]
threshold = 1
symbol_threshold = 1
number_threshold = 2
format = "[$symbol$number]($style) "
symbol = "jobs"
style = "bold blue"
disabled = false

[julia]
format = " [$symbol($version )]($style)"
version_format = "v${raw}"
symbol = "julia "
style = "bold purple"
disabled = false
detect_extensions = ["jl"]
detect_files = ["Project.toml", "Manifest.toml"]
detect_folders = []

[kotlin]
format = " [$symbol($version )]($style)"
version_format = "v${raw}"
symbol = "kotlin "
style = "bold blue"
kotlin_binary = "kotlin"
disabled = false
detect_extensions = ["kt", "kts"]
detect_files = []
detect_folders = []

[kubernetes]
symbol = "kubernetes "
format = '[$symbol$context( \($namespace\))]($style) in '
style = "cyan bold"
disabled = true
detect_extensions = []
detect_files = []
detect_folders = []
detect_env_vars = []
contexts = []

[kubernetes.context_aliases]

[kubernetes.user_aliases]

[line_break]
disabled = false

[localip]
ssh_only = false
format = "[$localipv4]($style) "
style = "green"
disabled = false

[lua]
format = " [$symbol($version )]($style)"
version_format = "v${raw}"
symbol = "lua "
style = "bold blue"
lua_binary = "lua"
disabled = false
detect_extensions = ["lua"]
detect_files = [".lua-version"]
detect_folders = ["lua"]

[memory_usage]
threshold = 75
format = " $symbol[$ram( | $swap)]($style) "
style = "white bold dimmed"
symbol = "memory "
disabled = true

[meson]
truncation_length = 4294967295
truncation_symbol = "‚Ä¶"
format = " [$symbol$project]($style) "
symbol = "meson "
style = "blue bold"
disabled = false

[mojo]
format = "with [$symbol($version )]($style)"
symbol = "mojo "
style = "bold 208"
disabled = false
detect_extensions = ["mojo", "üî•"]
detect_files = []
detect_folders = []

[nats]
format = "[$symbol($name )]($style)"
symbol = "nats "
style = "bold purple"
disabled = true

[nim]
format = " [$symbol($version )]($style)"
version_format = "v${raw}"
symbol = "nim "
style = "yellow bold"
disabled = false
detect_extensions = ["nim", "nims", "nimble"]
detect_files = ["nim.cfg"]
detect_folders = []

[nix_shell]
format = 'via [$symbol$state( \($name\))]($style) '
symbol = "nix  "
style = "bold blue"
impure_msg = "impure"
pure_msg = "pure"
unknown_msg = ""
disabled = false
heuristic = false

[nodejs]
format = " [$symbol($version )]($style)"
version_format = "v${raw}"
symbol = "node "
style = "bold green"
disabled = false
not_capable_style = "bold red"
detect_extensions = ["js", "mjs", "cjs", "ts", "mts", "cts"]
detect_files = ["package.json", ".node-version", ".nvmrc"]
detect_folders = ["node_modules"]

[ocaml]
format = 'via [$symbol($version )(\($switch_indicator$switch_name\) )]($style)'
version_format = "v${raw}"
global_switch_indicator = ""
local_switch_indicator = "*"
symbol = "ocaml "
style = "bold yellow"
disabled = false
detect_extensions = ["opam", "ml", "mli", "re", "rei"]
detect_files = ["dune", "dune-project", "jbuild", "jbuild-ignore", ".merlin"]
detect_folders = ["_opam", "esy.lock"]

[odin]
format = " [$symbol($version )]($style)"
show_commit = false
symbol = "odin "
style = "bold bright-blue"
disabled = false
detect_extensions = ["odin"]
detect_files = []
detect_folders = []

[opa]
format = " [$symbol($version )]($style)"
version_format = "v${raw}"
symbol = "opa  "
style = "bold blue"
disabled = false
detect_extensions = ["rego"]
detect_files = []
detect_folders = []

[openstack]
format = 'on [$symbol$cloud(\($project\))]($style) '
symbol = "openstack  "
style = "bold yellow"
disabled = false

[os]
format = "[$symbol]($style)"
style = "bold white"
disabled = true

[os.symbols]
AIX = "aix"
Alpaquita = "alpaquita"
AlmaLinux = "almalinux"
Alpine = "alpine"
Amazon = "amazon"
Android = "android"
Arch = "arch"
Artix = "artix"
CachyOS = "cachyos"
CentOS = "centos"
Debian = "debian"
DragonFly = "dragonfly"
Emscripten = "emscripten"
EndeavourOS = "endeavouros"
Fedora = "fedora"
FreeBSD = "freebsd"
Garuda = "garuda"
Gentoo = "gentoo"
HardenedBSD = "hardenedbsd"
Illumos = "illumos"
Kali = "kali"
Linux = "linux"
Mabox = "mabox"
Macos = "macos"
Manjaro = "manjaro"
Mariner = "mariner"
MidnightBSD = "midnightbsd"
Mint = "mint"
NetBSD = "netbsd"
NixOS = "nixos"
Nobara = "nobara"
OpenBSD = "openbsd"
OpenCloudOS = "opencloudos"
openEuler = "openeuler"
openSUSE = "opensuse"
OracleLinux = "oraclelinux"
Pop = "pop"
Raspbian = "raspbian"
Redhat = "redhat"
RedHatEnterprise = "redhatenterprise"
RockyLinux = "rockylinux"
Redox = "redox"
Solus = "solus"
SUSE = "suse"
Ubuntu = "ubuntu"
Ultramarine = "ultramarine"
Unknown = "unknown"
Uos = "uos"
Void = "void"
Windows = "windows"

[package]
format = "[$symbol$version]($style) "
symbol = "package "
style = "208 bold"
display_private = false
disabled = false
version_format = "v${raw}"

[perl]
format = " [$symbol($version )]($style)"
version_format = "v${raw}"
symbol = "perl "
style = "149 bold"
disabled = false
detect_extensions = ["pl", "pm", "pod"]
detect_files = [
  "Makefile.PL",
  "Build.PL",
  "cpanfile",
  "cpanfile.snapshot",
  "META.json",
  "META.yml",
  ".perl-version",
]
detect_folders = []

[php]
format = " [$symbol($version )]($style)"
version_format = "v${raw}"
symbol = "php "
style = "147 bold"
disabled = false
detect_extensions = ["php"]
detect_files = ["composer.json", ".php-version"]
detect_folders = []

[pijul_channel]
symbol = "pijul "
style = "bold purple"
format = " [$symbol$channel]($style) "
truncation_length = 9223372036854775807
truncation_symbol = "..."
disabled = true

[pulumi]
format = " [$symbol($username@)$stack]($style) "
version_format = "v${raw}"
symbol = "pulumi "
style = "bold 5"
disabled = false
search_upwards = true

[purescript]
format = " [$symbol($version )]($style)"
version_format = "v${raw}"
symbol = "<=> "
style = "bold white"
disabled = false
detect_extensions = ["purs"]
detect_files = ["spago.dhall", "spago.yaml", "spago.lock"]
detect_folders = []

[python]
pyenv_version_name = false
pyenv_prefix = "pyenv "
python_binary = ["python", "python3", "python2"]
format = '[${symbol}${pyenv_prefix}(${version} )(\($virtualenv\) )]($style)'
version_format = "v${raw}"
style = "yellow bold"
symbol = "python "
disabled = false
detect_extensions = ["py", "ipynb"]
detect_files = [
  "requirements.txt",
  ".python-version",
  "pyproject.toml",
  "Pipfile",
  "tox.ini",
  "setup.py",
  "__init__.py",
  "pixi.toml",
]
detect_folders = []
detect_env_vars = ["VIRTUAL_ENV"]

[quarto]
format = " [$symbol($version )]($style)"
version_format = "v${raw}"
symbol = "quarto "
style = "bold #75AADB"
disabled = false
detect_extensions = ["qmd"]
detect_files = ["_quarto.yml"]
detect_folders = []

[raku]
format = " [$symbol($version-$vm_version )]($style)"
version_format = "${raw}"
symbol = "raku "
style = "149 bold"
disabled = false
detect_extensions = ["p6", "pm6", "pod6", "raku", "rakumod"]
detect_files = ["META6.json"]
detect_folders = []

[red]
format = " [$symbol($version )]($style)"
version_format = "v${raw}"
symbol = "red "
style = "red bold"
disabled = false
detect_extensions = ["red", "reds"]
detect_files = []
detect_folders = []

[rlang]
format = " [$symbol($version )]($style)"
version_format = "v${raw}"
style = "blue bold"
symbol = "rlang "
disabled = false
detect_extensions = ["R", "Rd", "Rmd", "Rproj", "Rsx"]
detect_files = ["DESCRIPTION"]
detect_folders = [".Rproj.user"]

[ruby]
format = " [$symbol($version )]($style)"
version_format = "v${raw}"
symbol = "ruby "
style = "bold red"
disabled = false
detect_extensions = ["rb"]
detect_files = ["Gemfile", ".ruby-version"]
detect_folders = []
detect_variables = ["RUBY_VERSION", "RBENV_VERSION"]

[rust]
format = " [$symbol($version )]($style)"
version_format = "v${raw}"
symbol = "rust "
style = "bold red"
disabled = false
detect_extensions = ["rs"]
detect_files = ["Cargo.toml"]
detect_folders = []

[scala]
format = " [$symbol($version )]($style)"
version_format = "v${raw}"
disabled = false
style = "red bold"
symbol = "scala "
detect_extensions = ["sbt", "scala"]
detect_files = [".scalaenv", ".sbtenv", "build.sbt"]
detect_folders = [".metals"]

[shell]
format = "[$indicator]($style) "
bash_indicator = "bsh"
fish_indicator = "fsh"
zsh_indicator = "zsh"
powershell_indicator = "psh"
ion_indicator = "ion"
elvish_indicator = "esh"
tcsh_indicator = "tsh"
nu_indicator = "nu"
xonsh_indicator = "xsh"
cmd_indicator = "cmd"
unknown_indicator = ""
style = "white bold"
disabled = true

[shlvl]
threshold = 2
format = "[$symbol$shlvl]($style) "
symbol = "shlvl "
repeat = false
repeat_offset = 0
style = "bold yellow"
disabled = true

[singularity]
symbol = ""
format = '[$symbol\[$env\]]($style) '
style = "blue bold dimmed"
disabled = false

[solidity]
format = " [$symbol($version)]($style)"
version_format = "v${major}.${minor}.${patch}"
disabled = false
style = "bold blue"
symbol = "solidity "
compiler = ["solc"]
detect_extensions = ["sol"]
detect_files = []
detect_folders = []

[spack]
truncation_length = 1
format = " [$symbol$environment]($style) "
symbol = "spack "
style = "blue bold"
disabled = false

[status]
format = "[EXIT: $symbol$status]($style) "
symbol = ""
success_symbol = ""
not_executable_symbol = "!"
not_found_symbol = "?"
sigint_symbol = ""
signal_symbol = ""
style = "bold red"
map_symbol = false
recognize_signal_code = false
pipestatus = true
pipestatus_separator = "|"
pipestatus_format = '\[$pipestatus\] => [$symbol$common_meaning$signal_name$maybe_int]($style) '
disabled = false

[sudo]
format = "[as $symbol]($style)"
symbol = "sudo "
style = "bold blue"
allow_windows = false
disabled = true

[swift]
format = " [$symbol($version )]($style)"
version_format = "v${raw}"
symbol = "swift "
style = "bold 202"
disabled = false
detect_extensions = ["swift"]
detect_files = ["Package.swift"]
detect_folders = []

[terraform]
format = " [$symbol$workspace]($style) "
version_format = "v${raw}"
symbol = "terraform "
style = "bold 105"
disabled = false
detect_extensions = ["tf", "tfplan", "tfstate"]
detect_files = []
detect_folders = [".terraform"]

[time]
format = "[$time]($style) "
style = "bold black"
use_12hr = false
utc_time_offset = "local"
time_range = "-"
disabled = false

[typst]
format = " [$symbol($version )]($style)"
version_format = "v${raw}"
symbol = "typst "
style = "bold #0093A7"
disabled = false
detect_extensions = ["typ"]
detect_files = ["template.typ"]
detect_folders = []

[username]
detect_env_vars = []
format = "[$user]($style)"
style_root = "red"
style_user = "green"
show_always = true
disabled = false

[username.aliases]

[vagrant]
format = " [$symbol($version )]($style)"
version_format = "v${raw}"
symbol = "vagrant "
style = "cyan bold"
disabled = false
detect_extensions = []
detect_files = ["Vagrantfile"]
detect_folders = []

[vcsh]
symbol = "vcsh "
style = "bold yellow"
format = "vcsh [$symbol$repo]($style) "
disabled = false

[vlang]
format = " [$symbol($version )]($style)"
version_format = "v${raw}"
symbol = "vlang "
style = "blue bold"
disabled = false
detect_extensions = ["v"]
detect_files = ["v.mod", "vpkg.json", ".vpkg-lock.json"]
detect_folders = []

[zig]
format = " [$symbol($version )]($style)"
version_format = "v${raw}"
symbol = "zig "
style = "bold yellow"
disabled = false
detect_extensions = ["zig"]
detect_files = []
detect_folders = []

[custom]
